<?xml version='1.0' encoding='utf-8'?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Siebel Account Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">

As a Salesforce admin I want to syncronize Accounts between Salesfoce and Siebel.

This template serves as a foundation for setting an online sync of Accounts from one Salesforce instance to Siebel. Everytime there is a new Account or a change in an already existing one, the integration will poll for changes in Salesforce source instance and it will be responsible for updating the Account on the target Siebel instance.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this Template leverage the Mule batch module.
The batch job is divided in Input, Process and On Complete stages.
The integration is triggered by a poll defined in the flow that is going to trigger the application, querying newest Salesforce updates/creations matching a filter criteria and executing the batch job.
During the Process stage, each Salesforce Account is filtered depending on if it has an existing matching account in the Siebel. The last step of the Process stage groups the Accounts and inserts or updates them in Siebel. Finally during the On Complete stage the Template logsoutput statistics data into the console.

		</section>
		<section id="considerations">

To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source (Salesforce) and destination (Siebel) systems, that must be made for the template to run smoothly. 
**Failing to do so could lead to unexpected behavior of the template.**

		</section>
		<section id="sieb_dst">
		
In order to make the siebel connector work smoothly you have to provide the correct version of the siebel jars (Siebel.jar, SiebelJI_enu.jar) that works with your Siebel installation.

		</section>
		<section id="run_it">

See below.

		</section>
		<section id="application_configuration">
		
**Application Configuration**
+ page.size `10`
+ scheduler.frequency `60000`
+ scheduler.start.delay `1000`
+ watermark.default.expression `2018-01-10T15:53:00Z`


**Salesforce Connector Configuration**
+ sfdc.username `bob.dylan@orga`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**Oracle Siebel Connector Configuration**
+ sieb.user=`user`
+ sieb.password=`secret`
+ sieb.server=`server`
+ sieb.serverName=`serverName`
+ sieb.objectManager=`objectManager`
+ sieb.port=`2321`

		</section>
		<section id="api_calls">
		
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. 
This template uses just one query per poll period, therefore this is not something to worry about.

		</section>
		<section id="default_endpoints_xml">
		
This is file is conformed by a Flow containing the Poll that will periodically query Salesforce for updated/created Accounts that meet the defined criteria in the query. And then executing the batch job process with the query results.

		</section>
		<section id="default_business_logic_xml">
		
Functional aspect of the template is implemented on this XML, directed by a batch job that will be responsible for creations/updates. The severeal message processors constitute four high level actions that fully implement the logic of this template:

1. Job execution is invoked from triggerFlow (endpoints.xml) everytime there is a new query executed asking for created/updated Accounts.
2. During the Process stage, each Salesforce Account is filtered depending on if it has an existing matching Account in the Siebel.
3. The last step of the Process stage groups the Accounts and create/update them in Siebel. Finally during the On Complete stage the template logs output statistics data into the console.

		</section>
	</sections>
</configuration>